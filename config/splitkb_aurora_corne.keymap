  /*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

  #include <behaviors.dtsi>
  #include <dt-bindings/zmk/keys.h>
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/ext_power.h>

  / {
    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
    };

    keymap {
      compatible = "zmk,keymap";

      layer0 {
          bindings = <
          &kp ESCAPE       &kp Q   &kp W   &kp E   &kp R   &kp T        &kp Y   &kp U   &kp I     &kp O   &kp P           &kp BACKSPACE 
          &lt 5 TAB        &kp A   &kp S   &kp D   &kp F   &kp G        &kp H   &kp J   &kp K     &kp L   &kp SEMICOLON   &lt 5 ENTER 
          &kp LEFT_CONTROL &kp Z   &kp X   &kp C   &kp V   &kp B        &kp N   &kp M   &kp COMMA &kp DOT &kp SLASH       &kp ENTER 
                            &kp LEFT_GUI   &mo 3   &kp LEFT_SHIFT       &kp SPACE   &mo 2   &kp LEFT_ALT
          >;
      };

  layer1 {
          bindings = <
          &kp ESCAPE        &kp N1   &kp N2   &kp W    &kp N3   &kp N4        &kp Y   &kp U   &kp I       &kp O     &kp P         &kp BACKSPACE
          &kp F             &kp N5   &kp A    &kp S    &kp D    &kp N6        &kp H   &kp J   &kp K       &kp L     &kp SEMICOLON &lt 5 ENTER   
          &kp LEFT_CONTROL  &kp N7   &kp N8   &kp N9   &kp N0   &kp MINUS     &kp N   &kp M   &kp COMMA   &kp DOT   &kp SLASH     &kp ENTER 
                            &kp TAB  &kp LEFT_SHIFT  &kp SPACE                &trans  &mo 2   &trans
          >;
  };

  layer2 {
          bindings = <
          &kp ESCAPE         &kp N1             &kp N2             &kp N3   &kp N4   &kp N5                 &kp PAGE_UP     &kp HOME   &kp UP     &kp END   &none                &kp DELETE 
          &kp LEFT_SHIFT     &kp N6             &kp N7             &kp N8   &kp N9   &kp N0                 &kp PAGE_DOWN   &kp LEFT   &kp DOWN   &kp RIGHT &none                &kp ENTER 
          &kp LEFT_CONTROL   &kp LEFT_BRACKET   &kp SINGLE_QUOTE   &none    &none    &kp RIGHT_BRACKET      &none           &none      &none      &none     &kp K_APPLICATION    &kp ENTER   
                                                                       &kp LEFT_GUI &mo 4 &kp LEFT_ALT      &trans &trans &kp RIGHT_ALT
          >;
  };

  layer3 {
          bindings = <
          &kp LA(BSLH)       &kp LS(LA(BSLH))  &kp LS(EQUAL)   &kp LA(N5)       &kp LA(MINUS)       &kp N8            &kp KP_SLASH        &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_ASTERISK   &kp BACKSPACE 
          &kp LS(LA(DOT))    &kp EQUAL         &kp BSLH        &kp N5           &kp MINUS           &kp N1            &kp KP_MINUS        &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS       &kp DQT
          &kp LEFT_CONTROL   &kp GRAVE         &kp LS(GRAVE)   &kp LS(LA(N5))   &kp LS(LA(MINUS))   &kp LS(LA(L))     &kp LS(COMMA)       &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp EQUAL         &kp ENTER 
                                                                                          &trans &mo 4 &trans      &trans &kp KP_N0 &kp KP_N0
          >;
  };

  layer4 {
          bindings = <
          &none   &none   &none   &none   &none   &none       &none   &none   &none   &none   &none   &bt BT_CLR 
          &none   &none   &none   &none   &none   &none       &none   &none   &none   &none   &none   &none 
          &none   &none   &none   &none   &none   &none       &none   &none   &none   &none   &none   &none 
                                      &trans &trans &trans    &trans  &trans  &kp RIGHT_ALT
          >;
  };

  layer5 {
          bindings = <
          &kp F1             &kp F2   &kp F3         &kp F4            &kp F5        &kp F6                     &kp F7              &kp F8             &kp F9            &kp F10               &kp F11                   &kp F12   
          &none              &none    &kp LEFT_ALT   &kp LG(END)       &kp LA(TAB)   &kp LG(RIGHT_BRACKET)      &kp C_VOLUME_DOWN   &kp C_PLAY_PAUSE   &kp C_VOLUME_UP   &kp C_AL_CALCULATOR   &kp LG(LS(NUMBER_5))      &trans 
          &kp LEFT_CONTROL   &none    &none          &kp RC(RS(TAB))   &kp LC(TAB)   &none                      &bt BT_SEL 3        &bt BT_SEL 4       &none             &kp INSERT            &kp CAPSLOCK              &kp KP_NUMLOCK 
                                                                        &kp LEFT_GUI &kp LS(LA(F4)) &none       &bt BT_SEL 0        &bt BT_SEL 1       &bt BT_SEL 2
          >;
        };
    };
  };
  
